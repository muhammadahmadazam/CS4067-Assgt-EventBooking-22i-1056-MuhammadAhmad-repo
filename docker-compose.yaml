services:
  frontend:
    container_name: onlineeventmanagement_frontend
    build: 
      context: ./frontend
      args:
      - NEXT_PUBLIC_USER_SERVICE_URL=${USER_SERVICE_URL}
      - NEXT_PUBLIC_EVENT_SERVICE_URL=${SPRING_BOOT_URL}
      - NEXT_PUBLIC_BOOKING_SERVICE_URL=${BOOKING_SERVICE_URL}
    ports:
      - "${FRONTEND_PORT}:3000"    
    restart: always

  booking-service:
    container_name: onlineeventmanagement_booking-service
    build: ./booking-service
    ports:
      - "${BOOKING_SERVICE_PORT}:3001"
    environment:
      # PORT
      - PORT=${BOOKING_SERVICE_PORT}

        # POSTGRES CONNECTION
      - DB_USER=${POSTGRES_USER}
      - DB_HOST=${POSTGRES_HOST}
      - DB_NAME=${POSTGRES_DB}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_PORT=${POSTGRES_PORT}

        # RABBITMQ CONNECTION
      - RABBITMQ_URL=${RABBITMQ_URL}
      - RABBITMQ_QUEUE=${RABBITMQ_QUEUE}

        # EVENT SERVICE CONNECTION
      - SPRING_BOOT_URL=${SPRING_BOOT_INTERNAL_URL}

        # FRONTEND URL
      - FRONTEND_URL=${FRONTEND_URL}

        # JWT SECRET
      - JWT_SECRET=${SECRET_KEY}
    depends_on:
      rabbitmq:
        condition: service_started
      postgres:
        condition: service_healthy
    restart: always

  user-service:
    container_name: onlineeventmanagement_user-service
    build: ./user-service
    ports:
      - "${USER_SERVICE_PORT}:8000"
    environment:
      # JWT CONFIGURATION
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}

      # DATABASE URL [POSTGRES]
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}

      # FRONTEND URL
      - FRONTEND_URL=${FRONTEND_URL}
    depends_on:
      - postgres
    restart: always

  event-service:
    container_name: onlineeventmanagement_event-service
    build:
      context: ./event-service
      args:
        - SPRING_MONGODB_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@${MONGO_HOST}:${MONGO_PORT}/${MONGO_DB}?authSource=admin
    ports:
      - "${SPRING_BOOT_PORT}:8080"
    depends_on:
      - mongo

  notification-service:
    container_name: onlineeventmanagement_notification-service
    build: ./notification-service
    ports:
      - "${NOTIFICATION_SERVICE_PORT}:8085"
    environment:
      - RABBITMQ_URL=${RABBITMQ_URL}
      - RABBITMQ_QUEUE_NAME=${RABBITMQ_QUEUE}
      - GOOGLE_CREDENTIALS_JSON=${GOOGLE_CREDENTIALS_JSON}
      - GOOGLE_TOKEN_JSON=${GOOGLE_TOKEN_JSON}
    depends_on:
      - rabbitmq
    restart: always

  mongo:
    container_name: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    restart: always

  mongo-express:
    container_name: mongo-express-new
    image: mongo-express
    ports:
      - "${MONGO_EXPRESS_PORT}:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=password
    depends_on:
      - mongo
    restart: always

  postgres:
    container_name: postgres
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    volumes:
      - pgdata:/var/lib/postgresql/data

  pgadmin:
    container_name: pgadmin_new
    image: dpage/pgadmin4
    ports:
      - "${PGADMIN_PORT}:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    restart: always

  rabbitmq:
    container_name: rabbitmq-new
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: always

volumes:
  pgdata:
  mongo-data:

networks:
  default:
    driver: bridge
